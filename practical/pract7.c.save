#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        fprintf(stderr, "Error: memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(Node** headRef, int value) {
    Node* newNode = createNode(value);
    if (*headRef == NULL) {
        *headRef = newNode;
    } else {
        Node* cur = *headRef;
        while (cur->next)
            cur = cur->next;
        cur->next = newNode;
    }
}

void deleteFirstOccurrence(Node** headRef, int key) {
    if (*headRef == NULL) {
        printf("List is empty.\n");
     return;
    }

    Node* cur = *headRef;
    Node* prev = NULL;

    if (cur->data == key) {
        *headRef = cur->next;
        free(cur);
        printf("Deleted node with value %d from the head.\n", key);
        return;
    }

    while (cur != NULL && cur->data != key) {
        prev = cur;
        cur = cur->next;
    }

    if (cur == NULL) {
        printf("Value %d not found in list.\n", key);
        return;
    }

    prev->next = cur->next;
    free(cur);
    printf("Deleted first node with value %d.\n", key);
}

void displayList(const Node* head) {
    const Node* cur = head;
    printf("List: ");
    while (cur) {
        printf("%d", cur->data);
        if (cur->next) printf(" -> ");
        cur = cur->next;
    }
    printf(" -> NULL\n");
}

 
void freeList(Node* head) {
    Node* tmp;
    while (head) {
        tmp = head;
        head = head->next;
        free(tmp);
    }
}

int main(void) {
    Node* head = NULL;
    insertEnd(&head, 10);
    insertEnd(&head, 20);
    insertEnd(&head, 30);
    insertEnd(&head, 40);
    insertEnd(&head, 50);

    printf("Before deletion:\n");
    displayList(head);

    deleteFirstOccurrence(&head, 30);
    printf("\nAfter deletion of 30:\n");
    displayList(head);
    deleteFirstOccurrence(&head, 99);
    deleteFirstOccurrence(&head, 10);
    printf("\nAfter deletion of 10 (former head):\n");
    displayList(head);

    freeList(head);
    return 0;
}

